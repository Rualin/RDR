{"ast":null,"code":"import{useState}from'react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function ImageTextRecognizer(){const[image,setImage]=useState(null);const[imageFile,setImageFile]=useState(null);// Store the actual file for API\nconst[result,setResult]=useState('');const[isLoading,setIsLoading]=useState(false);const[error,setError]=useState(null);const API_URL='https://your-ml-api-endpoint.com/predict';// Replace with your API endpoint\nconst handleImageUpload=e=>{const file=e.target.files[0];if(file){setImageFile(file);// Store the file for API submission\nconst reader=new FileReader();reader.onloadend=()=>{setImage(reader.result);};reader.readAsDataURL(file);setError(null);// Reset error on new upload\nsetResult('');// Clear previous results\n}};// 2. Process image with real API\nconst processImage=async()=>{if(!imageFile)return;setIsLoading(true);setError(null);try{// Create FormData for the API request\nconst formData=new FormData();formData.append('image',imageFile);// API call\nconst response=await fetch(API_URL,{method:'POST',body:formData,headers:{// Include API key if needed\n// 'Authorization': `Bearer ${API_KEY}`,\n}});if(!response.ok){throw new Error(`API request failed with status ${response.status}`);}const data=await response.json();// Format the result based on your API response structure\nsetResult(formatApiResponse(data));}catch(error){console.error(\"Recognition error:\",error);setError(\"Failed to process image. Please try again.\");setResult('');}finally{setIsLoading(false);}};// Format the API response for display\nconst formatApiResponse=apiData=>{if(apiData.text){return`Recognized text: ${apiData.text}\\n}`;}return JSON.stringify(apiData,null,2);// Fallback to raw JSON\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"container mt-5\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"mb-4\",children:\"Image Text Recognition\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"col-md-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"imageUpload\",className:\"form-label\",children:\"Upload Image\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",className:\"form-control\",id:\"imageUpload\",accept:\"image/*\",onChange:handleImageUpload,disabled:isLoading})]}),image&&/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Image Preview:\"}),/*#__PURE__*/_jsx(\"img\",{src:image,alt:\"Preview\",className:\"img-fluid rounded\",style:{maxHeight:'300px'}})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:processImage,disabled:!image||isLoading,children:isLoading?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"span\",{className:\"spinner-border spinner-border-sm\",role:\"status\"}),\"Processing...\"]}):'Recognize Text'}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"alert alert-danger mt-3\",children:error})]}),/*#__PURE__*/_jsx(\"div\",{className:\"col-md-6\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"card-header\",children:\"Recognition Results\"}),/*#__PURE__*/_jsx(\"div\",{className:\"card-body\",children:result?/*#__PURE__*/_jsx(\"pre\",{className:\"mb-0\",children:result}):/*#__PURE__*/_jsx(\"p\",{className:\"text-muted mb-0\",children:image?'Click \"Recognize Text\" to process':'Upload an image first'})})]})})]})]});}export default ImageTextRecognizer;","map":{"version":3,"names":["useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ImageTextRecognizer","image","setImage","imageFile","setImageFile","result","setResult","isLoading","setIsLoading","error","setError","API_URL","handleImageUpload","e","file","target","files","reader","FileReader","onloadend","readAsDataURL","processImage","formData","FormData","append","response","fetch","method","body","headers","ok","Error","status","data","json","formatApiResponse","console","apiData","text","JSON","stringify","className","children","htmlFor","type","id","accept","onChange","disabled","src","alt","style","maxHeight","onClick","role"],"sources":["C:/Users/bukli/WebstormProjects/RDR/ml-demo/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nfunction ImageTextRecognizer() {\r\n    const [image, setImage] = useState(null);\r\n    const [imageFile, setImageFile] = useState(null); // Store the actual file for API\r\n    const [result, setResult] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const API_URL = 'https://your-ml-api-endpoint.com/predict'; // Replace with your API endpoint\r\n\r\n    const handleImageUpload = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            setImageFile(file); // Store the file for API submission\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                setImage(reader.result);\r\n            };\r\n            reader.readAsDataURL(file);\r\n            setError(null); // Reset error on new upload\r\n            setResult(''); // Clear previous results\r\n        }\r\n    };\r\n\r\n    // 2. Process image with real API\r\n    const processImage = async () => {\r\n        if (!imageFile) return;\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Create FormData for the API request\r\n            const formData = new FormData();\r\n            formData.append('image', imageFile);\r\n\r\n            // API call\r\n            const response = await fetch(API_URL, {\r\n                method: 'POST',\r\n                body: formData,\r\n                headers: {\r\n                    // Include API key if needed\r\n                    // 'Authorization': `Bearer ${API_KEY}`,\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`API request failed with status ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // Format the result based on your API response structure\r\n            setResult(formatApiResponse(data));\r\n\r\n        } catch (error) {\r\n            console.error(\"Recognition error:\", error);\r\n            setError(\"Failed to process image. Please try again.\");\r\n            setResult('');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    // Format the API response for display\r\n    const formatApiResponse = (apiData) => {\r\n        if (apiData.text) {\r\n            return `Recognized text: ${apiData.text}\\n}`;\r\n        }\r\n        return JSON.stringify(apiData, null, 2); // Fallback to raw JSON\r\n    };\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h2 className=\"mb-4\">Image Text Recognition</h2>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6\">\r\n                    {/* Image Upload */}\r\n                    <div className=\"mb-3\">\r\n                        <label htmlFor=\"imageUpload\" className=\"form-label\">\r\n                            Upload Image\r\n                        </label>\r\n                        <input\r\n                            type=\"file\"\r\n                            className=\"form-control\"\r\n                            id=\"imageUpload\"\r\n                            accept=\"image/*\"\r\n                            onChange={handleImageUpload}\r\n                            disabled={isLoading}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Preview */}\r\n                    {image && (\r\n                        <div className=\"mb-3\">\r\n                            <h5>Image Preview:</h5>\r\n                            <img\r\n                                src={image}\r\n                                alt=\"Preview\"\r\n                                className=\"img-fluid rounded\"\r\n                                style={{ maxHeight: '300px' }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Process Button */}\r\n                    <button\r\n                        className=\"btn btn-primary\"\r\n                        onClick={processImage}\r\n                        disabled={!image || isLoading}\r\n                    >\r\n                        {isLoading ? (\r\n                            <>\r\n                                <span className=\"spinner-border spinner-border-sm\" role=\"status\"></span>\r\n                                Processing...\r\n                            </>\r\n                        ) : (\r\n                            'Recognize Text'\r\n                        )}\r\n                    </button>\r\n\r\n                    {/* Error message */}\r\n                    {error && (\r\n                        <div className=\"alert alert-danger mt-3\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"col-md-6\">\r\n                    {/* Results */}\r\n                    <div className=\"card\">\r\n                        <div className=\"card-header\">Recognition Results</div>\r\n                        <div className=\"card-body\">\r\n                            {result ? (\r\n                                <pre className=\"mb-0\">{result}</pre>\r\n                            ) : (\r\n                                <p className=\"text-muted mb-0\">\r\n                                    {image ? 'Click \"Recognize Text\" to process' : 'Upload an image first'}\r\n                                </p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageTextRecognizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}